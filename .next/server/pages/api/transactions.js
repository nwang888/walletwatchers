"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/transactions";
exports.ids = ["pages/api/transactions"];
exports.modules = {

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ }),

/***/ "sqlite":
/*!*************************!*\
  !*** external "sqlite" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("sqlite");;

/***/ }),

/***/ "(api)/./src/pages/api/transactions.js":
/*!***************************************!*\
  !*** ./src/pages/api/transactions.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ transaction_handler)\n/* harmony export */ });\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sqlite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sqlite */ \"sqlite\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sqlite__WEBPACK_IMPORTED_MODULE_1__]);\nsqlite__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n//DEBUG INFO: i think location and datetime details do not exist in the Plaid Sandbox Data\n//TODO: Fix potential sql injection on where clause\n// create an async function that posts the trasnactions to the database\nasync function postTransactionsData(added, modified, removed, cursor, next_cursor) {\n    const db = await (0,sqlite__WEBPACK_IMPORTED_MODULE_1__.open)({\n        filename: \"./sql/big.db\",\n        driver: (sqlite3__WEBPACK_IMPORTED_MODULE_0___default().Database)\n    });\n    try {\n        for (let transaction of added){\n            let { transaction_id , account_id , category: [category_primary, category_detailed] , merchant_name , store_number , logo_url , amount: transaction_amount , location: { address , city , region , postal_code , country  } , datetime , payment_channel  } = transaction;\n            // Fetch account_name from Accounts table\n            const account = await db.get(`SELECT account_name FROM Accounts WHERE account_id = ?`, account_id);\n            const account_name = account ? account.account_name : null;\n            // console.log(\"account_name: \", account_name);\n            await db.run(`\n                INSERT INTO Transactions (\n\t\t\t\t\ttransaction_id,\n\t\t\t\t\taccount_id,\n\t\t\t\t\taccount_name,\n\t\t\t\t\tcategory_primary,\n\t\t\t\t\tcategory_detailed,\n\t\t\t\t\tmerchant_name,\n\t\t\t\t\tstore_number,\n\t\t\t\t\tlogo_url,\n\t\t\t\t\ttransaction_amount,\n\t\t\t\t\taddress,\n\t\t\t\t\tcity,\n\t\t\t\t\tregion,\n\t\t\t\t\tpostal_code,\n\t\t\t\t\tcountry,\n\t\t\t\t\tdatetime,\n\t\t\t\t\tpayment_channel,\n\t\t\t\t\tcursor,\n\t\t\t\t\tnext_cursor\n\t\t\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n\t\t\t\t`, [\n                transaction_id,\n                account_id,\n                account_name,\n                category_primary,\n                category_detailed,\n                merchant_name,\n                store_number,\n                logo_url,\n                transaction_amount,\n                address,\n                city,\n                region,\n                postal_code,\n                country,\n                datetime,\n                payment_channel,\n                cursor,\n                next_cursor\n            ]);\n        }\n        for (let transaction1 of modified){\n            let { transaction_id: transaction_id1 , category: [category_primary1, category_detailed1] , merchant_name: merchant_name1 , store_number: store_number1 , logo_url: logo_url1 , amount: transaction_amount1 , location: { address: address1 , city: city1 , region: region1 , postal_code: postal_code1 , country: country1  } , datetime: datetime1 , payment_channel: payment_channel1  } = transaction1;\n            await db.run(`\n\t\t\t\tUPDATE Transactions\n\t\t\t\tSET\n\t\t\t\t\tcategory_primary = ?,\n\t\t\t\t\tcategory_detailed = ?,\n\t\t\t\t\tmerchant_name = ?,\n\t\t\t\t\tstore_number = ?,\n\t\t\t\t\tlogo_url = ?,\n\t\t\t\t\ttransaction_amount = ?,\n\t\t\t\t\taddress = ?,\n\t\t\t\t\tcity = ?,\n\t\t\t\t\tregion = ?,\n\t\t\t\t\tpostal_code = ?,\n\t\t\t\t\tcountry = ?,\n\t\t\t\t\tdatetime = ?,\n\t\t\t\t\tpayment_channel = ?,\n\t\t\t\t\tnext_cursor = ?\n\t\t\t\tWHERE transaction_id = ?\n\t\t\t\t`, [\n                category_primary1,\n                category_detailed1,\n                merchant_name1,\n                store_number1,\n                logo_url1,\n                transaction_amount1,\n                address1,\n                city1,\n                region1,\n                postal_code1,\n                country1,\n                datetime1,\n                payment_channel1,\n                next_cursor,\n                transaction_id1 // this might be wrong\n            ]);\n        }\n        for (let transaction2 of removed){\n            let { transaction_id: transaction_id2  } = transaction2;\n            await db.run(`\n                DELETE FROM Transactions\n                WHERE transaction_id = ?\n                `, [\n                transaction_id2\n            ]);\n        }\n    } catch (e) {\n        console.error(e);\n    }\n    await db.close();\n}\nasync function getTransactionsData(sort_by = \"datetime\", order = \"desc\", page = 1, rowsPerPage = 10, paginate = true, filters = {}) {\n    const db = await (0,sqlite__WEBPACK_IMPORTED_MODULE_1__.open)({\n        filename: \"./sql/big.db\",\n        driver: (sqlite3__WEBPACK_IMPORTED_MODULE_0___default().Database)\n    });\n    // Validate sort_by and order\n    const validColumns = [\n        \"account_id\",\n        \"account_name\",\n        \"category_primary\",\n        \"category_detailed\",\n        \"merchant_name\",\n        \"transaction_amount\",\n        \"city\",\n        \"region\",\n        \"datetime\"\n    ];\n    const validDirections = [\n        \"asc\",\n        \"desc\"\n    ];\n    if (!validColumns.includes(sort_by) || !validDirections.includes(order)) {\n        throw new Error(\"Invalid sort_by or order\", sort_by, order);\n    }\n    const filters_parsed = JSON.parse(decodeURIComponent(filters));\n    // console.log(\"filters: \", filters_parsed);\n    let whereClause = \"\";\n    let whereValues = [];\n    for (const [key, value] of Object.entries(filters_parsed)){\n        if (value && validColumns.includes(key)) {\n            whereClause += ` AND ${key} = ?`;\n            whereValues.push(value);\n        } else {\n            console.error(`Invalid filter key: ${key}`);\n        }\n    }\n    // console.log(\"whereClause: \", whereClause);\n    // console.log(\"whereValues: \", whereValues);\n    let payload;\n    const totalRows = await db.get(`SELECT COUNT(*) as count\n\t\tFROM Transactions\n\t\tWHERE 1=1 ${whereClause}`, whereValues);\n    if (paginate) {\n        const offset = (page - 1) * rowsPerPage;\n        payload = await db.all(`SELECT * FROM Transactions\n\t\t\tWHERE 1=1 ${whereClause}\n\t\t\tORDER BY ${sort_by} ${order}, datetime DESC\n\t\t\tLIMIT ? OFFSET ?`, [\n            ...whereValues,\n            rowsPerPage,\n            offset\n        ]);\n    } else {\n        payload = await db.all(`SELECT * FROM Transactions\n\t\t\tWHERE 1=1 ${whereClause}\n\t\t\tORDER BY ${sort_by} ${order}, datetime DESC`, whereValues);\n    }\n    await db.close();\n    return {\n        transactions: payload,\n        totalRows: totalRows.count\n    };\n}\nasync function transaction_handler(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            const { sort_by , order , page , rowsPerPage , paginate , filters  } = req.query;\n            const payload = await getTransactionsData(sort_by, order, page, rowsPerPage, paginate, filters);\n            return res.status(200).json(payload);\n        } catch (error) {\n            console.error(\"Error fetching transaction data:\", error);\n            return res.status(500).json({\n                error: \"Failed to fetch account data\"\n            });\n        }\n    }\n    if (req.method == \"POST\") {\n        try {\n            const { added , modified , removed , cursor  } = req.body;\n            await postTransactionsData(added, modified, removed, cursor);\n            return res.status(200).json({\n                message: \"Posted Transaction Data\"\n            });\n        } catch (error1) {\n            console.error(error1);\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/transactions.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/transactions.js"));
module.exports = __webpack_exports__;

})();